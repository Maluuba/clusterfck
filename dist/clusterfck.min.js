!function(t){function e(i){if(s[i])return s[i].exports;var r=s[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var s={};return e.m=t,e.c=s,e.p="",e(0)}([function(t,e,s){t.exports={hcluster:s(3),Kmeans:s(2),kmeans:s(2).kmeans}},function(t,e){t.exports={euclidean:function(t,e){for(var s=0,i=0;i<t.length;i++)s+=Math.pow(e[i]-t[i],2);return Math.sqrt(s)},manhattan:function(t,e){for(var s=0,i=0;i<t.length;i++)s+=Math.abs(e[i]-t[i]);return s},max:function(t,e){for(var s=0,i=0;i<t.length;i++)s=Math.max(s,Math.abs(e[i]-t[i]));return s}}},function(t,e,s){function i(t){this.centroids=t||[]}var r=s(1);i.prototype.randomCentroids=function(t,e){var s=t.slice(0);return s.sort(function(){return Math.round(Math.random())-.5}),s.slice(0,e)},i.prototype.classify=function(t,e){var s=1/0,i=0;e=e||"euclidean","string"==typeof e&&(e=r[e]);for(var n=0;n<this.centroids.length;n++){var h=e(t,this.centroids[n]);s>h&&(s=h,i=n)}return i},i.prototype.cluster=function(t,e,s,i,n){e=e||Math.max(2,Math.ceil(Math.sqrt(t.length/2))),s=s||"euclidean","string"==typeof s&&(s=r[s]),this.centroids=this.randomCentroids(t,e);for(var h=new Array(t.length),o=new Array(e),a=0,d=!0;d;){for(var u=0;u<t.length;u++)h[u]=this.classify(t[u],s);d=!1;for(var l=0;e>l;l++){for(var f=[],u=0;u<h.length;u++)h[u]==l&&f.push(t[u]);if(f.length){for(var c=this.centroids[l],y=new Array(c.length),v=0;v<c.length;v++){for(var k=0,u=0;u<f.length;u++)k+=f[u][v];y[v]=k/f.length,y[v]!=c[v]&&(d=!0)}this.centroids[l]=y,o[l]=f}}n&&a++%i==0&&n(o)}return o},i.prototype.toJSON=function(){return JSON.stringify(this.centroids)},i.prototype.fromJSON=function(t){return this.centroids=JSON.parse(t),this},t.exports=i,t.exports.kmeans=function(t,e){return(new i).cluster(t,e)}},function(t,e,s){var i=s(1),r=function(t,e,s){this.distance=t,this.linkage=e,this.threshold=void 0==s?1/0:s};r.prototype={tree:function(t,e,s){this.tree=[],this.dists=[],this.mins=[],this.index=[];for(var i=0;i<t.length;i++){var r={value:t[i],key:i,index:i,size:1};this.tree[i]=r,this.index[i]=r,this.dists[i]=[],this.mins[i]=0}for(var i=0;i<this.tree.length;i++)for(var n=0;i>=n;n++){var h=i==n?1/0:this.distance(this.tree[i].value,this.tree[n].value);this.dists[i][n]=h,this.dists[n][i]=h,h<this.dists[i][this.mins[i]]&&(this.mins[i]=n)}for(var o=this.mergeClosest(),i=0;o;)s&&i++%e==0&&s(this.tree),o=this.mergeClosest();return this.tree.forEach(function(t){delete t.key,delete t.index}),this.tree},mergeClosest:function(){for(var t=0,e=1/0,s=0;s<this.tree.length;s++){var i=this.tree[s].key,r=this.dists[i][this.mins[i]];e>r&&(t=i,e=r)}if(e>=this.threshold)return!1;var n=this.index[t],h=this.index[this.mins[t]],o={dist:e,left:n,right:h,key:n.key,size:n.size+h.size};this.tree[n.index]=o,this.tree.splice(h.index,1),this.index[n.key]=o;for(var s=0;s<this.tree.length;s++){var r,a=this.tree[s];n.key==a.key?r=1/0:"single"==this.linkage?(r=this.dists[n.key][a.key],this.dists[n.key][a.key]>this.dists[h.key][a.key]&&(r=this.dists[h.key][a.key])):"complete"==this.linkage?(r=this.dists[n.key][a.key],this.dists[n.key][a.key]<this.dists[h.key][a.key]&&(r=this.dists[h.key][a.key])):r="average"==this.linkage?(this.dists[n.key][a.key]*n.size+this.dists[h.key][a.key]*h.size)/(n.size+h.size):this.distance(a.value,n.value),this.dists[n.key][a.key]=this.dists[a.key][n.key]=r}for(var s=0;s<this.tree.length;s++){var d=this.tree[s].key;if(this.mins[d]==n.key||this.mins[d]==h.key){for(var e=d,u=0;u<this.tree.length;u++){var l=this.tree[u].key;this.dists[d][l]<this.dists[d][e]&&(e=l)}this.mins[d]=e}this.tree[s].index=s}return delete n.key,delete h.key,delete n.index,delete h.index,!0},clusters:function(t){function e(t){var e,s=-1;return t.forEach(function(t){t.dist>s&&(s=t.dist,e=t)}),e}function s(t){return 1===t.size?[t.value]:s(t.left).concat(s(t.right))}(t>this.tree.size||1>t)&&(t=this.tree.size);for(var i=[],r=[this.tree];t>1;){var n=e(r);r.splice(r.indexOf(n),1),r.push(n.left,n.right),t--}return r.forEach(function(t){i.push(s(t))}),i}};var n=function(t,e,s,n,h,o){e=e||"euclidean",s=s||"average","string"==typeof e&&(e=i[e]);var a=new r(e,s,n),d=a.tree(t,h,o);return{tree:void 0===n?d[0]:d,clusters:a.clusters}};t.exports=n}]);